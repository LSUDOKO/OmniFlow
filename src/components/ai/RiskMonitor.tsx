"use client";

import { useState, useEffect, useCallback } from "react";
import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  Text,
  Badge,
  HStack,
  VStack,
  useColorModeValue,
  Alert,
  AlertIcon,
  Button,
  Icon,
  Switch,
  FormControl,
  FormLabel,
  Slider,
  SliderTrack,
  SliderFilledTrack,
  SliderThumb,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  useToast,
  Spinner,
} from "@chakra-ui/react";
import {
  FaBell,
  FaPlay,
  FaPause,
  FaCog,
  FaExclamationTriangle,
  FaShieldAlt,
  FaRobot,
  FaEye,
  FaHistory,
} from "react-icons/fa";

interface RiskAlert {
  id: string;
  type: "FRAUD_DETECTED" | "HIGH_RISK_WALLET" | "SUSPICIOUS_ASSET" | "PATTERN_MATCH";
  severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
  title: string;
  description: string;
  address: string;
  riskScore: number;
  timestamp: Date;
  isRead: boolean;
  autoGenerated: boolean;
}

interface MonitoringConfig {
  enabled: boolean;
  riskThreshold: number;
  alertFrequency: number; // minutes
  monitorWallets: boolean;
  monitorAssets: boolean;
  monitorTransactions: boolean;
  autoBlock: boolean;
  notificationChannels: {
    email: boolean;
    webhook: boolean;
    dashboard: boolean;
  };
}

const mockAlerts: RiskAlert[] = [
  {
    id: "1",
    type: "FRAUD_DETECTED",
    severity: "CRITICAL",
    title: "Wash Trading Pattern Detected",
    description: "Wallet 0x9876...4321 showing circular transaction patterns with 15 related addresses",
    address: "0x9876...4321",
    riskScore: 850,
    timestamp: new Date(Date.now() - 300000), // 5 minutes ago
    isRead: false,
    autoGenerated: true,
  },
  {
    id: "2",
    type: "HIGH_RISK_WALLET",
    severity: "HIGH",
    title: "High-Risk Wallet Activity",
    description: "Wallet exceeded risk threshold with rapid transaction velocity",
    address: "0xabcd...1234",
    riskScore: 780,
    timestamp: new Date(Date.now() - 900000), // 15 minutes ago
    isRead: false,
    autoGenerated: true,
  },
  {
    id: "3",
    type: "SUSPICIOUS_ASSET",
    severity: "MEDIUM",
    title: "Asset Compliance Warning",
    description: "Property NFT #42 lacks proper verification documentation",
    address: "0x1111...2222",
    riskScore: 450,
    timestamp: new Date(Date.now() - 1800000), // 30 minutes ago
    isRead: true,
    autoGenerated: true,
  },
];

export default function RiskMonitor() {
  const [alerts, setAlerts] = useState<RiskAlert[]>(mockAlerts);
  const [isMonitoring, setIsMonitoring] = useState(true);
  const [config, setConfig] = useState<MonitoringConfig>({
    enabled: true,
    riskThreshold: 500,
    alertFrequency: 5,
    monitorWallets: true,
    monitorAssets: true,
    monitorTransactions: true,
    autoBlock: false,
    notificationChannels: {
      email: true,
      webhook: false,
      dashboard: true,
    },
  });

  const { isOpen, onOpen, onClose } = useDisclosure();
  const toast = useToast();
  const cardBg = useColorModeValue("white", "gray.800");
  const borderColor = useColorModeValue("gray.200", "gray.600");

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "LOW": return "blue";
      case "MEDIUM": return "yellow";
      case "HIGH": return "orange";
      case "CRITICAL": return "red";
      default: return "gray";
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "FRAUD_DETECTED": return FaExclamationTriangle;
      case "HIGH_RISK_WALLET": return FaShieldAlt;
      case "SUSPICIOUS_ASSET": return FaEye;
      case "PATTERN_MATCH": return FaRobot;
      default: return FaBell;
    }
  };

  const unreadAlerts = alerts.filter(alert => !alert.isRead);
  const criticalAlerts = alerts.filter(alert => alert.severity === "CRITICAL");

  // Simulate real-time monitoring
  const generateRandomAlert = useCallback(() => {
    const alertTypes = ["FRAUD_DETECTED", "HIGH_RISK_WALLET", "SUSPICIOUS_ASSET", "PATTERN_MATCH"];
    const severities = ["LOW", "MEDIUM", "HIGH", "CRITICAL"];
    const addresses = ["0x1234...5678", "0x9876...4321", "0xabcd...efgh", "0x1111...2222"];

    const newAlert: RiskAlert = {
      id: Date.now().toString(),
      type: alertTypes[Math.floor(Math.random() * alertTypes.length)] as any,
      severity: severities[Math.floor(Math.random() * severities.length)] as any,
      title: "AI Risk Alert Generated",
      description: "Automated risk detection system identified potential threat",
      address: addresses[Math.floor(Math.random() * addresses.length)],
      riskScore: Math.floor(Math.random() * 1000),
      timestamp: new Date(),
      isRead: false,
      autoGenerated: true,
    };

    setAlerts(prev => [newAlert, ...prev]);
    
    if (newAlert.severity === "CRITICAL" || newAlert.severity === "HIGH") {
      toast({
        title: "High Risk Alert",
        description: newAlert.title,
        status: "warning",
        duration: 5000,
        isClosable: true,
      });
    }
  }, [toast]);

  useEffect(() => {
    if (!isMonitoring || !config.enabled) return;

    const interval = setInterval(() => {
      // Simulate random alert generation (10% chance every interval)
      if (Math.random() < 0.1) {
        generateRandomAlert();
      }
    }, config.alertFrequency * 60 * 1000);

    return () => clearInterval(interval);
  }, [isMonitoring, config.enabled, config.alertFrequency, generateRandomAlert]);

  const markAsRead = (alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId ? { ...alert, isRead: true } : alert
    ));
  };

  const markAllAsRead = () => {
    setAlerts(prev => prev.map(alert => ({ ...alert, isRead: true })));
  };

  const toggleMonitoring = () => {
    setIsMonitoring(!isMonitoring);
    toast({
      title: isMonitoring ? "Monitoring Paused" : "Monitoring Started",
      description: isMonitoring ? "Real-time risk monitoring has been paused" : "Real-time risk monitoring is now active",
      status: isMonitoring ? "warning" : "success",
      duration: 3000,
      isClosable: true,
    });
  };

  const updateConfig = (newConfig: Partial<MonitoringConfig>) => {
    setConfig(prev => ({ ...prev, ...newConfig }));
    toast({
      title: "Configuration Updated",
      description: "Risk monitoring settings have been saved",
      status: "success",
      duration: 2000,
      isClosable: true,
    });
  };

  return (
    <VStack spacing={6} w="full">
      {/* Header */}
      <HStack justify="space-between" w="full">
        <HStack>
          <Icon as={FaBell} color="red.500" boxSize={6} />
          <Heading size="lg">Real-Time Risk Monitor</Heading>
          {isMonitoring && <Spinner size="sm" color="green.500" />}
        </HStack>
        <HStack>
          <Button
            size="sm"
            colorScheme={isMonitoring ? "red" : "green"}
            onClick={toggleMonitoring}
            leftIcon={<Icon as={isMonitoring ? FaPause : FaPlay} />}
          >
            {isMonitoring ? "Pause" : "Start"}
          </Button>
          <Button
            size="sm"
            variant="outline"
            onClick={onOpen}
            leftIcon={<Icon as={FaCog} />}
          >
            Settings
          </Button>
        </HStack>
      </HStack>

      {/* Alert Summary */}
      <HStack spacing={4} w="full">
        <Card bg={cardBg} border="1px solid" borderColor={borderColor} flex={1}>
          <CardBody textAlign="center">
            <Text fontSize="2xl" fontWeight="bold" color="red.500">
              {unreadAlerts.length}
            </Text>
            <Text fontSize="sm">Unread Alerts</Text>
          </CardBody>
        </Card>
        
        <Card bg={cardBg} border="1px solid" borderColor={borderColor} flex={1}>
          <CardBody textAlign="center">
            <Text fontSize="2xl" fontWeight="bold" color="orange.500">
              {criticalAlerts.length}
            </Text>
            <Text fontSize="sm">Critical Alerts</Text>
          </CardBody>
        </Card>
        
        <Card bg={cardBg} border="1px solid" borderColor={borderColor} flex={1}>
          <CardBody textAlign="center">
            <Text fontSize="2xl" fontWeight="bold" color={isMonitoring ? "green.500" : "gray.500"}>
              {isMonitoring ? "ACTIVE" : "PAUSED"}
            </Text>
            <Text fontSize="sm">Monitoring Status</Text>
          </CardBody>
        </Card>
      </HStack>

      {/* Quick Actions */}
      {unreadAlerts.length > 0 && (
        <Alert status="warning" rounded="md">
          <AlertIcon />
          <Box flex="1">
            <Text fontWeight="semibold">
              You have {unreadAlerts.length} unread alert{unreadAlerts.length > 1 ? 's' : ''}
            </Text>
          </Box>
          <Button size="sm" onClick={markAllAsRead}>
            Mark All Read
          </Button>
        </Alert>
      )}

      {/* Active Alerts */}
      <Card bg={cardBg} w="full">
        <CardHeader>
          <HStack justify="space-between">
            <Heading size="md">Active Risk Alerts</Heading>
            <Badge colorScheme="red" variant="subtle">
              {alerts.length} Total
            </Badge>
          </HStack>
        </CardHeader>
        <CardBody>
          <VStack spacing={3}>
            {alerts.slice(0, 10).map((alert) => (
              <Box
                key={alert.id}
                w="full"
                p={4}
                border="1px solid"
                borderColor={alert.isRead ? borderColor : `${getSeverityColor(alert.severity)}.300`}
                rounded="md"
                bg={alert.isRead ? "transparent" : `${getSeverityColor(alert.severity)}.50`}
                opacity={alert.isRead ? 0.7 : 1}
              >
                <HStack justify="space-between" mb={2}>
                  <HStack>
                    <Icon as={getTypeIcon(alert.type)} color={`${getSeverityColor(alert.severity)}.500`} />
                    <Text fontWeight="semibold" fontSize="sm">
                      {alert.title}
                    </Text>
                    {alert.autoGenerated && (
                      <Badge size="xs" colorScheme="purple">AI</Badge>
                    )}
                  </HStack>
                  <HStack>
                    <Badge colorScheme={getSeverityColor(alert.severity)} size="sm">
                      {alert.severity}
                    </Badge>
                    <Badge variant="outline" size="sm">
                      {alert.riskScore}
                    </Badge>
                  </HStack>
                </HStack>
                
                <Text fontSize="sm" mb={2}>
                  {alert.description}
                </Text>
                
                <HStack justify="space-between" fontSize="xs" color="gray.600">
                  <Text>{alert.address}</Text>
                  <HStack>
                    <Text>{alert.timestamp.toLocaleTimeString()}</Text>
                    {!alert.isRead && (
                      <Button size="xs" onClick={() => markAsRead(alert.id)}>
                        Mark Read
                      </Button>
                    )}
                  </HStack>
                </HStack>
              </Box>
            ))}
            
            {alerts.length === 0 && (
              <Box textAlign="center" py={8}>
                <Icon as={FaShieldAlt} boxSize={12} color="green.500" mb={4} />
                <Text fontSize="lg" fontWeight="semibold" color="green.500">
                  All Clear
                </Text>
                <Text fontSize="sm" color="gray.600">
                  No active risk alerts detected
                </Text>
              </Box>
            )}
          </VStack>
        </CardBody>
      </Card>

      {/* Configuration Modal */}
      <Modal isOpen={isOpen} onClose={onClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Risk Monitor Settings</ModalHeader>
          <ModalCloseButton />
          <ModalBody pb={6}>
            <VStack spacing={6}>
              <FormControl>
                <HStack justify="space-between">
                  <FormLabel>Enable Monitoring</FormLabel>
                  <Switch
                    isChecked={config.enabled}
                    onChange={(e) => updateConfig({ enabled: e.target.checked })}
                  />
                </HStack>
              </FormControl>

              <FormControl>
                <FormLabel>Risk Threshold: {config.riskThreshold}</FormLabel>
                <Slider
                  value={config.riskThreshold}
                  onChange={(value) => updateConfig({ riskThreshold: value })}
                  min={100}
                  max={900}
                  step={50}
                >
                  <SliderTrack>
                    <SliderFilledTrack />
                  </SliderTrack>
                  <SliderThumb />
                </Slider>
              </FormControl>

              <FormControl>
                <FormLabel>Alert Frequency (minutes): {config.alertFrequency}</FormLabel>
                <Slider
                  value={config.alertFrequency}
                  onChange={(value) => updateConfig({ alertFrequency: value })}
                  min={1}
                  max={60}
                  step={1}
                >
                  <SliderTrack>
                    <SliderFilledTrack />
                  </SliderTrack>
                  <SliderThumb />
                </Slider>
              </FormControl>

              <VStack align="start" w="full">
                <Text fontWeight="semibold">Monitoring Scope</Text>
                <FormControl>
                  <HStack justify="space-between">
                    <FormLabel>Monitor Wallets</FormLabel>
                    <Switch
                      isChecked={config.monitorWallets}
                      onChange={(e) => updateConfig({ monitorWallets: e.target.checked })}
                    />
                  </HStack>
                </FormControl>
                <FormControl>
                  <HStack justify="space-between">
                    <FormLabel>Monitor Assets</FormLabel>
                    <Switch
                      isChecked={config.monitorAssets}
                      onChange={(e) => updateConfig({ monitorAssets: e.target.checked })}
                    />
                  </HStack>
                </FormControl>
                <FormControl>
                  <HStack justify="space-between">
                    <FormLabel>Monitor Transactions</FormLabel>
                    <Switch
                      isChecked={config.monitorTransactions}
                      onChange={(e) => updateConfig({ monitorTransactions: e.target.checked })}
                    />
                  </HStack>
                </FormControl>
              </VStack>

              <FormControl>
                <HStack justify="space-between">
                  <FormLabel>Auto-block High Risk</FormLabel>
                  <Switch
                    isChecked={config.autoBlock}
                    onChange={(e) => updateConfig({ autoBlock: e.target.checked })}
                  />
                </HStack>
              </FormControl>
            </VStack>
          </ModalBody>
        </ModalContent>
      </Modal>
    </VStack>
  );
}
